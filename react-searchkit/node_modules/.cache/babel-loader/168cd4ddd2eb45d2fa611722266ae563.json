{"ast":null,"code":"var _jsxFileName = \"/home/datio/workspace/react-searchkit/src/lib/components/AutocompleteSearchBar/AutocompleteSearchBar.js\";\n\n/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\nimport './AutocompleteSearchBar.scss';\n\nclass AutocompleteSearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this._handleAutocompleteChange = suggestionString => {\n      if (suggestionString.length >= this.minCharsToAutocomplete) {\n        this.updateSuggestions(suggestionString);\n      }\n    };\n\n    this.onInputChange = async queryString => {\n      await this.setState({\n        currentValue: queryString\n      });\n      this.handleAutocompleteChange(this.state.currentValue);\n    };\n\n    this.executeSearch = () => {\n      this.updateQueryString(this.state.currentValue);\n    };\n\n    this.updateQueryString = this.props.updateQueryString;\n    this.updateSuggestions = this.props.debounce ? _.debounce(this.props.updateSuggestions, this.props.debounceTime, {\n      leading: true\n    }) : this.props.updateSuggestions;\n    this.clearSuggestions = this.props.clearSuggestions;\n    this.minCharsToAutocomplete = this.props.minCharsToAutocomplete;\n    this.state = {\n      currentValue: this.props.queryString || ''\n    };\n    this.renderElement = props.renderElement || this._renderElement;\n    this.renderSuggestions = props.renderSuggestions || this._renderSuggestions;\n    this.handleAutocompleteChange = props.handleAutocompleteChange || this._handleAutocompleteChange;\n  }\n\n  _renderSuggestions(querySuggestions) {\n    const onSuggestionSelected = async suggestion => {\n      await this.setState({\n        currentValue: suggestion\n      });\n      this.clearSuggestions();\n      this.executeSearch();\n    };\n\n    if (querySuggestions.length === 0) {\n      return null;\n    }\n\n    return React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, querySuggestions.map(text => React.createElement(\"li\", {\n      onClick: () => onSuggestionSelected(text),\n      key: text,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, text)));\n  }\n\n  _renderElement(placeholder, queryString, querySuggestions, onInputChange, executeSearch) {\n    const onBtnSearchClick = (event, input) => {\n      executeSearch();\n    };\n\n    const onKeyPress = (event, input) => {\n      if (event.key === 'Enter') {\n        executeSearch();\n      }\n    };\n\n    return React.createElement(\"div\", {\n      className: \"AutoCompleteText\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94\n      },\n      __self: this\n    }, React.createElement(Input, {\n      action: {\n        content: 'Search',\n        onClick: onBtnSearchClick\n      },\n      fluid: true,\n      placeholder: placeholder,\n      onChange: (event, {\n        value\n      }) => {\n        onInputChange(value);\n      },\n      value: queryString,\n      onKeyPress: onKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }), this.renderSuggestions(querySuggestions));\n  }\n\n  render() {\n    const _this$props = this.props,\n          placeholder = _this$props.placeholder,\n          suggestions = _this$props.suggestions;\n    return this.renderElement(placeholder, this.state.currentValue, suggestions, this.onInputChange, this.executeSearch);\n  }\n\n}\n\nAutocompleteSearchBar.propTypes = {\n  queryString: PropTypes.string,\n  updateQueryString: PropTypes.func.isRequired,\n  updateSuggestions: PropTypes.func.isRequired,\n  clearSuggestions: PropTypes.func.isRequired,\n  renderElement: PropTypes.func,\n  renderSuggestions: PropTypes.func,\n  handleAutocompleteChange: PropTypes.func,\n  debounce: PropTypes.bool,\n  debounceTime: PropTypes.number,\n  placeholder: PropTypes.string,\n  minCharsToAutocomplete: PropTypes.number\n};\nAutocompleteSearchBar.defaultProps = {\n  renderElement: null,\n  renderSuggestions: null,\n  handleAutocompleteChange: null,\n  placeholder: 'Type something',\n  minCharsToAutocomplete: 3\n};\n\nconst AutocompleteSearchBarUncontrolled = props => React.createElement(AutocompleteSearchBar, Object.assign({\n  key: props.queryString\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 148\n  },\n  __self: this\n}));\n\nexport default AutocompleteSearchBarUncontrolled;","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/components/AutocompleteSearchBar/AutocompleteSearchBar.js"],"names":["_","React","Component","PropTypes","Input","AutocompleteSearchBar","constructor","props","_handleAutocompleteChange","suggestionString","length","minCharsToAutocomplete","updateSuggestions","onInputChange","queryString","setState","currentValue","handleAutocompleteChange","state","executeSearch","updateQueryString","debounce","debounceTime","leading","clearSuggestions","renderElement","_renderElement","renderSuggestions","_renderSuggestions","querySuggestions","onSuggestionSelected","suggestion","map","text","placeholder","onBtnSearchClick","event","input","onKeyPress","key","content","onClick","value","render","suggestions","propTypes","string","func","isRequired","bool","number","defaultProps","AutocompleteSearchBarUncontrolled"],"mappings":"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","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport _ from 'lodash';\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\nimport './AutocompleteSearchBar.scss';\n\nclass AutocompleteSearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.updateQueryString = this.props.updateQueryString;\n    this.updateSuggestions = this.props.debounce\n      ? _.debounce(this.props.updateSuggestions, this.props.debounceTime, {\n          leading: true,\n        })\n      : this.props.updateSuggestions;\n    this.clearSuggestions = this.props.clearSuggestions;\n    this.minCharsToAutocomplete = this.props.minCharsToAutocomplete;\n    this.state = {\n      currentValue: this.props.queryString || '',\n    };\n    this.renderElement = props.renderElement || this._renderElement;\n    this.renderSuggestions = props.renderSuggestions || this._renderSuggestions;\n    this.handleAutocompleteChange =\n      props.handleAutocompleteChange || this._handleAutocompleteChange;\n  }\n\n  _handleAutocompleteChange = suggestionString => {\n    if (suggestionString.length >= this.minCharsToAutocomplete) {\n      this.updateSuggestions(suggestionString);\n    }\n  };\n\n  onInputChange = async queryString => {\n    await this.setState({\n      currentValue: queryString,\n    });\n\n    this.handleAutocompleteChange(this.state.currentValue);\n  };\n\n  executeSearch = () => {\n    this.updateQueryString(this.state.currentValue);\n  };\n\n  _renderSuggestions(querySuggestions) {\n    const onSuggestionSelected = async suggestion => {\n      await this.setState({\n        currentValue: suggestion,\n      });\n      this.clearSuggestions();\n      this.executeSearch();\n    };\n\n    if (querySuggestions.length === 0) {\n      return null;\n    }\n\n    return (\n      <ul>\n        {querySuggestions.map(text => (\n          <li onClick={() => onSuggestionSelected(text)} key={text}>\n            {text}\n          </li>\n        ))}\n      </ul>\n    );\n  }\n\n  _renderElement(\n    placeholder,\n    queryString,\n    querySuggestions,\n    onInputChange,\n    executeSearch\n  ) {\n    const onBtnSearchClick = (event, input) => {\n      executeSearch();\n    };\n    const onKeyPress = (event, input) => {\n      if (event.key === 'Enter') {\n        executeSearch();\n      }\n    };\n\n    return (\n      <div className=\"AutoCompleteText\">\n        <Input\n          action={{\n            content: 'Search',\n            onClick: onBtnSearchClick,\n          }}\n          fluid\n          placeholder={placeholder}\n          onChange={(event, { value }) => {\n            onInputChange(value);\n          }}\n          value={queryString}\n          onKeyPress={onKeyPress}\n        />\n        {this.renderSuggestions(querySuggestions)}\n      </div>\n    );\n  }\n\n  render() {\n    const { placeholder, suggestions } = this.props;\n    return this.renderElement(\n      placeholder,\n      this.state.currentValue,\n      suggestions,\n      this.onInputChange,\n      this.executeSearch\n    );\n  }\n}\n\nAutocompleteSearchBar.propTypes = {\n  queryString: PropTypes.string,\n  updateQueryString: PropTypes.func.isRequired,\n  updateSuggestions: PropTypes.func.isRequired,\n  clearSuggestions: PropTypes.func.isRequired,\n  renderElement: PropTypes.func,\n  renderSuggestions: PropTypes.func,\n  handleAutocompleteChange: PropTypes.func,\n  debounce: PropTypes.bool,\n  debounceTime: PropTypes.number,\n  placeholder: PropTypes.string,\n  minCharsToAutocomplete: PropTypes.number,\n};\n\nAutocompleteSearchBar.defaultProps = {\n  renderElement: null,\n  renderSuggestions: null,\n  handleAutocompleteChange: null,\n  placeholder: 'Type something',\n  minCharsToAutocomplete: 3,\n};\n\nconst AutocompleteSearchBarUncontrolled = props => (\n  <AutocompleteSearchBar key={props.queryString} {...props} />\n);\nexport default AutocompleteSearchBarUncontrolled;\n"]},"metadata":{},"sourceType":"module"}