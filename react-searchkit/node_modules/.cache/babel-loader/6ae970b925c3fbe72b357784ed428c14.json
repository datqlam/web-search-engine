{"ast":null,"code":"import _defineProperty from \"/home/datio/workspace/react-searchkit/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018-2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport _get from 'lodash/get';\nimport _hasIn from 'lodash/hasIn';\nimport axios from 'axios';\nimport { InvenioRequestSerializer } from './InvenioRequestSerializer';\nimport { InvenioResponseSerializer } from './InvenioResponseSerializer';\nexport class InvenioSearchApi {\n  constructor(config) {\n    this.search = async stateQuery => {\n      const response = await this.http.request({\n        params: stateQuery\n      });\n      console.log(res);\n      return this.responseSerializer.serialize(response.data);\n    };\n\n    this.validateConfig(config);\n    this.initSerializers(config);\n    this.initAxios(config);\n  }\n\n  validateConfig(config) {\n    if (!_hasIn(config, 'url')) {\n      throw new Error('InvenioSearchApi config: `url` field is required.');\n    }\n  }\n\n  initSerializers(config) {\n    const requestSerializerCls = _get(config, 'invenio.requestSerializer', InvenioRequestSerializer);\n\n    const responseSerializerCls = _get(config, 'invenio.responseSerializer', InvenioResponseSerializer);\n\n    this.requestSerializer = new requestSerializerCls();\n    this.responseSerializer = new responseSerializerCls();\n  }\n\n  initAxios(config) {\n    delete config.invenio;\n\n    const axiosConfig = _objectSpread({\n      paramsSerializer: this.requestSerializer.serialize,\n      baseURL: config.url\n    }, config);\n\n    this.http = axios.create(axiosConfig);\n  }\n  /**\n   * Perform the backend request to search and return the serialized list of results for the app state `results`.\n   * @param {string} stateQuery the `query` state with the user input\n   */\n\n\n}","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/api/contrib/invenio/InvenioSearchApi.js"],"names":["_get","_hasIn","axios","InvenioRequestSerializer","InvenioResponseSerializer","InvenioSearchApi","constructor","config","search","stateQuery","response","http","request","params","console","log","res","responseSerializer","serialize","data","validateConfig","initSerializers","initAxios","Error","requestSerializerCls","responseSerializerCls","requestSerializer","invenio","axiosConfig","paramsSerializer","baseURL","url","create"],"mappings":";;;;;;AAAA;;;;;;;AAQA,OAAOA,IAAP,MAAiB,YAAjB;AACA,OAAOC,MAAP,MAAmB,cAAnB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,wBAAT,QAAyC,4BAAzC;AACA,SAASC,yBAAT,QAA0C,6BAA1C;AAEA,OAAO,MAAMC,gBAAN,CAAuB;AAC5BC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAAA,SA0CpBC,MA1CoB,GA0CX,MAAMC,UAAN,IAAoB;AAC3B,YAAMC,QAAQ,GAAG,MAAM,KAAKC,IAAL,CAAUC,OAAV,CAAkB;AACvCC,QAAAA,MAAM,EAAEJ;AAD+B,OAAlB,CAAvB;AAGAK,MAAAA,OAAO,CAACC,GAAR,CAAYC,GAAZ;AACA,aAAO,KAAKC,kBAAL,CAAwBC,SAAxB,CAAkCR,QAAQ,CAACS,IAA3C,CAAP;AACD,KAhDmB;;AAClB,SAAKC,cAAL,CAAoBb,MAApB;AACA,SAAKc,eAAL,CAAqBd,MAArB;AACA,SAAKe,SAAL,CAAef,MAAf;AACD;;AAEDa,EAAAA,cAAc,CAACb,MAAD,EAAS;AACrB,QAAI,CAACN,MAAM,CAACM,MAAD,EAAS,KAAT,CAAX,EAA4B;AAC1B,YAAM,IAAIgB,KAAJ,CAAU,mDAAV,CAAN;AACD;AACF;;AAEDF,EAAAA,eAAe,CAACd,MAAD,EAAS;AACtB,UAAMiB,oBAAoB,GAAGxB,IAAI,CAC/BO,MAD+B,EAE/B,2BAF+B,EAG/BJ,wBAH+B,CAAjC;;AAKA,UAAMsB,qBAAqB,GAAGzB,IAAI,CAChCO,MADgC,EAEhC,4BAFgC,EAGhCH,yBAHgC,CAAlC;;AAMA,SAAKsB,iBAAL,GAAyB,IAAIF,oBAAJ,EAAzB;AACA,SAAKP,kBAAL,GAA0B,IAAIQ,qBAAJ,EAA1B;AACD;;AAEDH,EAAAA,SAAS,CAACf,MAAD,EAAS;AAChB,WAAOA,MAAM,CAACoB,OAAd;;AACA,UAAMC,WAAW;AACfC,MAAAA,gBAAgB,EAAE,KAAKH,iBAAL,CAAuBR,SAD1B;AAEfY,MAAAA,OAAO,EAAEvB,MAAM,CAACwB;AAFD,OAGZxB,MAHY,CAAjB;;AAKA,SAAKI,IAAL,GAAYT,KAAK,CAAC8B,MAAN,CAAaJ,WAAb,CAAZ;AACD;AAED;;;;;;AAvC4B","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018-2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport _get from 'lodash/get';\nimport _hasIn from 'lodash/hasIn';\nimport axios from 'axios';\nimport { InvenioRequestSerializer } from './InvenioRequestSerializer';\nimport { InvenioResponseSerializer } from './InvenioResponseSerializer';\n\nexport class InvenioSearchApi {\n  constructor(config) {\n    this.validateConfig(config);\n    this.initSerializers(config);\n    this.initAxios(config);\n  }\n\n  validateConfig(config) {\n    if (!_hasIn(config, 'url')) {\n      throw new Error('InvenioSearchApi config: `url` field is required.');\n    }\n  }\n\n  initSerializers(config) {\n    const requestSerializerCls = _get(\n      config,\n      'invenio.requestSerializer',\n      InvenioRequestSerializer\n    );\n    const responseSerializerCls = _get(\n      config,\n      'invenio.responseSerializer',\n      InvenioResponseSerializer\n    );\n\n    this.requestSerializer = new requestSerializerCls();\n    this.responseSerializer = new responseSerializerCls();\n  }\n\n  initAxios(config) {\n    delete config.invenio;\n    const axiosConfig = {\n      paramsSerializer: this.requestSerializer.serialize,\n      baseURL: config.url, // transform URL to baseURL to have clean external APIs\n      ...config,\n    };\n    this.http = axios.create(axiosConfig);\n  }\n\n  /**\n   * Perform the backend request to search and return the serialized list of results for the app state `results`.\n   * @param {string} stateQuery the `query` state with the user input\n   */\n  search = async stateQuery => {\n    const response = await this.http.request({\n      params: stateQuery,\n    });\n    console.log(res)\n    return this.responseSerializer.serialize(response.data);\n  };\n}\n"]},"metadata":{},"sourceType":"module"}