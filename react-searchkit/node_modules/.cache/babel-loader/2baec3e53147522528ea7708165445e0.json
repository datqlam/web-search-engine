{"ast":null,"code":"var _jsxFileName = \"/home/datio/workspace/react-searchkit/src/lib/components/Aggregator/Aggregator.js\";\n\n/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'semantic-ui-react';\nimport AggregatorValues from './AggregatorValues';\nexport default class Aggregator extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onUserSelectionChange = aggregation => {\n      this.updateQueryAggregation(aggregation);\n    };\n\n    this._renderElement = (title, resultsAggregations, aggregations, customProps) => {\n      return resultsAggregations !== undefined ? React.createElement(Card, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, React.createElement(Card.Content, {\n        header: title,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      }), React.createElement(Card.Content, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, aggregations)) : null;\n    };\n\n    this.title = props.title;\n    this.field = props.field;\n    this.updateQueryAggregation = props.updateQueryAggregation;\n    this.renderElement = props.renderElement || this._renderElement;\n    this.customProps = props.customProps;\n  }\n\n  render() {\n    const _this$props = this.props,\n          userSelectionAggregations = _this$props.userSelectionAggregations,\n          resultsAggregations = _this$props.resultsAggregations;\n    const current = userSelectionAggregations || [];\n    const results = resultsAggregations[this.field] || {}; // user selection for this specific aggregator\n\n    const userSelection = current.filter(selectedAggr => this.field in selectedAggr);\n    const aggregations = React.createElement(AggregatorValues, {\n      field: this.field,\n      values: results,\n      userSelection: userSelection,\n      onUserSelectionChange: this.onUserSelectionChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48\n      },\n      __self: this\n    });\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    }, this.renderElement(this.title, results, aggregations, this.customProps));\n  }\n\n}\nAggregator.propTypes = {\n  title: PropTypes.string.isRequired,\n  field: PropTypes.string.isRequired,\n  userSelectionAggregations: PropTypes.array.isRequired,\n  resultsAggregations: PropTypes.object.isRequired,\n  updateQueryAggregation: PropTypes.func.isRequired,\n  renderElement: PropTypes.func\n};\nAggregator.defaultProps = {\n  renderElement: null\n};","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/components/Aggregator/Aggregator.js"],"names":["React","Component","PropTypes","Card","AggregatorValues","Aggregator","constructor","props","onUserSelectionChange","aggregation","updateQueryAggregation","_renderElement","title","resultsAggregations","aggregations","customProps","undefined","field","renderElement","render","userSelectionAggregations","current","results","userSelection","filter","selectedAggr","propTypes","string","isRequired","array","object","func","defaultProps"],"mappings":";;AAAA;;;;;;;AAQA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,IAAT,QAAqB,mBAArB;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AAEA,eAAe,MAAMC,UAAN,SAAyBJ,SAAzB,CAAmC;AAChDK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SASnBC,qBATmB,GASKC,WAAW,IAAI;AACrC,WAAKC,sBAAL,CAA4BD,WAA5B;AACD,KAXkB;;AAAA,SAanBE,cAbmB,GAaF,CAACC,KAAD,EAAQC,mBAAR,EAA6BC,YAA7B,EAA2CC,WAA3C,KAA2D;AAC1E,aAAOF,mBAAmB,KAAKG,SAAxB,GACL,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD,CAAM,OAAN;AAAc,QAAA,MAAM,EAAEJ,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,EAEE,oBAAC,IAAD,CAAM,OAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAeE,YAAf,CAFF,CADK,GAKH,IALJ;AAMD,KApBkB;;AAEjB,SAAKF,KAAL,GAAaL,KAAK,CAACK,KAAnB;AACA,SAAKK,KAAL,GAAaV,KAAK,CAACU,KAAnB;AACA,SAAKP,sBAAL,GAA8BH,KAAK,CAACG,sBAApC;AACA,SAAKQ,aAAL,GAAqBX,KAAK,CAACW,aAAN,IAAuB,KAAKP,cAAjD;AACA,SAAKI,WAAL,GAAmBR,KAAK,CAACQ,WAAzB;AACD;;AAeDI,EAAAA,MAAM,GAAG;AAAA,wBACoD,KAAKZ,KADzD;AAAA,UACCa,yBADD,eACCA,yBADD;AAAA,UAC4BP,mBAD5B,eAC4BA,mBAD5B;AAEP,UAAMQ,OAAO,GAAGD,yBAAyB,IAAI,EAA7C;AACA,UAAME,OAAO,GAAGT,mBAAmB,CAAC,KAAKI,KAAN,CAAnB,IAAmC,EAAnD,CAHO,CAKP;;AACA,UAAMM,aAAa,GAAGF,OAAO,CAACG,MAAR,CACpBC,YAAY,IAAI,KAAKR,KAAL,IAAcQ,YADV,CAAtB;AAIA,UAAMX,YAAY,GAChB,oBAAC,gBAAD;AACE,MAAA,KAAK,EAAE,KAAKG,KADd;AAEE,MAAA,MAAM,EAAEK,OAFV;AAGE,MAAA,aAAa,EAAEC,aAHjB;AAIE,MAAA,qBAAqB,EAAE,KAAKf,qBAJ9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AASA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKU,aAAL,CACC,KAAKN,KADN,EAECU,OAFD,EAGCR,YAHD,EAIC,KAAKC,WAJN,CADH,CADF;AAUD;;AApD+C;AAuDlDV,UAAU,CAACqB,SAAX,GAAuB;AACrBd,EAAAA,KAAK,EAAEV,SAAS,CAACyB,MAAV,CAAiBC,UADH;AAErBX,EAAAA,KAAK,EAAEf,SAAS,CAACyB,MAAV,CAAiBC,UAFH;AAGrBR,EAAAA,yBAAyB,EAAElB,SAAS,CAAC2B,KAAV,CAAgBD,UAHtB;AAIrBf,EAAAA,mBAAmB,EAAEX,SAAS,CAAC4B,MAAV,CAAiBF,UAJjB;AAKrBlB,EAAAA,sBAAsB,EAAER,SAAS,CAAC6B,IAAV,CAAeH,UALlB;AAMrBV,EAAAA,aAAa,EAAEhB,SAAS,CAAC6B;AANJ,CAAvB;AASA1B,UAAU,CAAC2B,YAAX,GAA0B;AACxBd,EAAAA,aAAa,EAAE;AADS,CAA1B","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Card } from 'semantic-ui-react';\nimport AggregatorValues from './AggregatorValues';\n\nexport default class Aggregator extends Component {\n  constructor(props) {\n    super(props);\n    this.title = props.title;\n    this.field = props.field;\n    this.updateQueryAggregation = props.updateQueryAggregation;\n    this.renderElement = props.renderElement || this._renderElement;\n    this.customProps = props.customProps;\n  }\n\n  onUserSelectionChange = aggregation => {\n    this.updateQueryAggregation(aggregation);\n  };\n\n  _renderElement = (title, resultsAggregations, aggregations, customProps) => {\n    return resultsAggregations !== undefined ? (\n      <Card>\n        <Card.Content header={title} />\n        <Card.Content>{aggregations}</Card.Content>\n      </Card>\n    ) : null;\n  };\n\n  render() {\n    const { userSelectionAggregations, resultsAggregations } = this.props;\n    const current = userSelectionAggregations || [];\n    const results = resultsAggregations[this.field] || {};\n\n    // user selection for this specific aggregator\n    const userSelection = current.filter(\n      selectedAggr => this.field in selectedAggr\n    );\n\n    const aggregations = (\n      <AggregatorValues\n        field={this.field}\n        values={results}\n        userSelection={userSelection}\n        onUserSelectionChange={this.onUserSelectionChange}\n      />\n    );\n\n    return (\n      <div>\n        {this.renderElement(\n          this.title,\n          results,\n          aggregations,\n          this.customProps\n        )}\n      </div>\n    );\n  }\n}\n\nAggregator.propTypes = {\n  title: PropTypes.string.isRequired,\n  field: PropTypes.string.isRequired,\n  userSelectionAggregations: PropTypes.array.isRequired,\n  resultsAggregations: PropTypes.object.isRequired,\n  updateQueryAggregation: PropTypes.func.isRequired,\n  renderElement: PropTypes.func,\n};\n\nAggregator.defaultProps = {\n  renderElement: null,\n};\n"]},"metadata":{},"sourceType":"module"}