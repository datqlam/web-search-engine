{"ast":null,"code":"var _jsxFileName = \"/home/datio/workspace/react-searchkit/src/lib/components/SearchBar/SearchBar.js\";\n\n/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onInputChange = queryString => {\n      this.setState({\n        currentValue: queryString\n      });\n    };\n\n    this.executeSearch = () => {\n      this.updateQueryString(this.state.currentValue);\n    };\n\n    this.updateQueryString = this.props.updateQueryString;\n    this.state = {\n      currentValue: this.props.queryString || ''\n    };\n    this.renderElement = props.renderElement || this._renderElement;\n  }\n\n  _renderElement(placeholder, queryString, onInputChange, executeSearch) {\n    placeholder = placeholder || 'Type something';\n\n    const onBtnSearchClick = (event, input) => {\n      executeSearch();\n    };\n\n    const onKeyPress = (event, input) => {\n      if (event.key === 'Enter') {\n        executeSearch();\n      }\n    };\n\n    return React.createElement(Input, {\n      action: {\n        content: 'Search',\n        onClick: onBtnSearchClick\n      },\n      fluid: true,\n      placeholder: placeholder,\n      onChange: (event, {\n        value\n      }) => {\n        onInputChange(value);\n      },\n      value: queryString,\n      onKeyPress: onKeyPress,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34\n      },\n      __self: this\n    });\n  }\n\n  render() {\n    const placeholder = this.props.placeholder;\n    return this.renderElement(placeholder, this.state.currentValue, this.onInputChange, this.executeSearch);\n  }\n\n}\n\nSearchBar.propTypes = {\n  queryString: PropTypes.string,\n  updateQueryString: PropTypes.func.isRequired,\n  renderElement: PropTypes.func\n};\nSearchBar.defaultProps = {\n  renderElement: null\n};\n\nconst SearchBarUncontrolled = props => React.createElement(SearchBar, Object.assign({\n  key: props.queryString\n}, props, {\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82\n  },\n  __self: this\n}));\n\nexport default SearchBarUncontrolled;","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/components/SearchBar/SearchBar.js"],"names":["React","Component","PropTypes","Input","SearchBar","constructor","props","onInputChange","queryString","setState","currentValue","executeSearch","updateQueryString","state","renderElement","_renderElement","placeholder","onBtnSearchClick","event","input","onKeyPress","key","content","onClick","value","render","propTypes","string","func","isRequired","defaultProps","SearchBarUncontrolled"],"mappings":";;AAAA;;;;;;;AAQA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,KAAT,QAAsB,mBAAtB;;AAEA,MAAMC,SAAN,SAAwBH,SAAxB,CAAkC;AAChCI,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoCnBC,aApCmB,GAoCHC,WAAW,IAAI;AAC7B,WAAKC,QAAL,CAAc;AACZC,QAAAA,YAAY,EAAEF;AADF,OAAd;AAGD,KAxCkB;;AAAA,SA0CnBG,aA1CmB,GA0CH,MAAM;AACpB,WAAKC,iBAAL,CAAuB,KAAKC,KAAL,CAAWH,YAAlC;AACD,KA5CkB;;AAEjB,SAAKE,iBAAL,GAAyB,KAAKN,KAAL,CAAWM,iBAApC;AACA,SAAKC,KAAL,GAAa;AACXH,MAAAA,YAAY,EAAE,KAAKJ,KAAL,CAAWE,WAAX,IAA0B;AAD7B,KAAb;AAGA,SAAKM,aAAL,GAAqBR,KAAK,CAACQ,aAAN,IAAuB,KAAKC,cAAjD;AACD;;AAEDA,EAAAA,cAAc,CAACC,WAAD,EAAcR,WAAd,EAA2BD,aAA3B,EAA0CI,aAA1C,EAAyD;AACrEK,IAAAA,WAAW,GAAGA,WAAW,IAAI,gBAA7B;;AACA,UAAMC,gBAAgB,GAAG,CAACC,KAAD,EAAQC,KAAR,KAAkB;AACzCR,MAAAA,aAAa;AACd,KAFD;;AAGA,UAAMS,UAAU,GAAG,CAACF,KAAD,EAAQC,KAAR,KAAkB;AACnC,UAAID,KAAK,CAACG,GAAN,KAAc,OAAlB,EAA2B;AACzBV,QAAAA,aAAa;AACd;AACF,KAJD;;AAKA,WACE,oBAAC,KAAD;AACE,MAAA,MAAM,EAAE;AACNW,QAAAA,OAAO,EAAE,QADH;AAENC,QAAAA,OAAO,EAAEN;AAFH,OADV;AAKE,MAAA,KAAK,MALP;AAME,MAAA,WAAW,EAAED,WANf;AAOE,MAAA,QAAQ,EAAE,CAACE,KAAD,EAAQ;AAAEM,QAAAA;AAAF,OAAR,KAAsB;AAC9BjB,QAAAA,aAAa,CAACiB,KAAD,CAAb;AACD,OATH;AAUE,MAAA,KAAK,EAAEhB,WAVT;AAWE,MAAA,UAAU,EAAEY,UAXd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAeD;;AAYDK,EAAAA,MAAM,GAAG;AAAA,UACCT,WADD,GACiB,KAAKV,KADtB,CACCU,WADD;AAEP,WAAO,KAAKF,aAAL,CACLE,WADK,EAEL,KAAKH,KAAL,CAAWH,YAFN,EAGL,KAAKH,aAHA,EAIL,KAAKI,aAJA,CAAP;AAMD;;AAvD+B;;AA0DlCP,SAAS,CAACsB,SAAV,GAAsB;AACpBlB,EAAAA,WAAW,EAAEN,SAAS,CAACyB,MADH;AAEpBf,EAAAA,iBAAiB,EAAEV,SAAS,CAAC0B,IAAV,CAAeC,UAFd;AAGpBf,EAAAA,aAAa,EAAEZ,SAAS,CAAC0B;AAHL,CAAtB;AAMAxB,SAAS,CAAC0B,YAAV,GAAyB;AACvBhB,EAAAA,aAAa,EAAE;AADQ,CAAzB;;AAIA,MAAMiB,qBAAqB,GAAGzB,KAAK,IACjC,oBAAC,SAAD;AAAW,EAAA,GAAG,EAAEA,KAAK,CAACE;AAAtB,GAAuCF,KAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GADF;;AAGA,eAAeyB,qBAAf","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Input } from 'semantic-ui-react';\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props);\n    this.updateQueryString = this.props.updateQueryString;\n    this.state = {\n      currentValue: this.props.queryString || '',\n    };\n    this.renderElement = props.renderElement || this._renderElement;\n  }\n\n  _renderElement(placeholder, queryString, onInputChange, executeSearch) {\n    placeholder = placeholder || 'Type something';\n    const onBtnSearchClick = (event, input) => {\n      executeSearch();\n    };\n    const onKeyPress = (event, input) => {\n      if (event.key === 'Enter') {\n        executeSearch();\n      }\n    };\n    return (\n      <Input\n        action={{\n          content: 'Search',\n          onClick: onBtnSearchClick,\n        }}\n        fluid\n        placeholder={placeholder}\n        onChange={(event, { value }) => {\n          onInputChange(value);\n        }}\n        value={queryString}\n        onKeyPress={onKeyPress}\n      />\n    );\n  }\n\n  onInputChange = queryString => {\n    this.setState({\n      currentValue: queryString,\n    });\n  };\n\n  executeSearch = () => {\n    this.updateQueryString(this.state.currentValue);\n  };\n\n  render() {\n    const { placeholder } = this.props;\n    return this.renderElement(\n      placeholder,\n      this.state.currentValue,\n      this.onInputChange,\n      this.executeSearch\n    );\n  }\n}\n\nSearchBar.propTypes = {\n  queryString: PropTypes.string,\n  updateQueryString: PropTypes.func.isRequired,\n  renderElement: PropTypes.func,\n};\n\nSearchBar.defaultProps = {\n  renderElement: null,\n};\n\nconst SearchBarUncontrolled = props => (\n  <SearchBar key={props.queryString} {...props} />\n);\nexport default SearchBarUncontrolled;\n"]},"metadata":{},"sourceType":"module"}