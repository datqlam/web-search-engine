{"ast":null,"code":"var _jsxFileName = \"/home/datio/workspace/react-searchkit/src/lib/components/Aggregator/AggregatorValues.js\";\n\n/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, List } from 'semantic-ui-react';\nimport _find from 'lodash/find';\nimport _capitalize from 'lodash/capitalize';\nexport default class AggregatorValues extends Component {\n  constructor(props) {\n    super(props);\n\n    this.buildAggregations = (fieldName, values, userSelection) => {\n      const parentNestedField = values.hasNestedField;\n      return Object.keys(values).map((key, index) => {\n        if (typeof values[key] === 'object') {\n          const aggrValue = values[key];\n          const checked = this.isItemChecked(fieldName, aggrValue, userSelection);\n\n          const _onUserSelectionChange = (e, {\n            value\n          }) => {\n            const aggrNameValue = {};\n            aggrNameValue[fieldName] = {\n              value: aggrValue.key\n            };\n            this.onUserSelectionChange(aggrNameValue);\n          };\n\n          const label = \"\".concat(_capitalize(aggrValue.name), \" (\").concat(aggrValue.total, \")\");\n          const checkboxItem = React.createElement(Checkbox, {\n            label: label,\n            value: aggrValue.key,\n            checked: checked,\n            onClick: _onUserSelectionChange,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 39\n            },\n            __self: this\n          });\n          let nestedAgg;\n\n          if (values[key].hasNestedField) {\n            nestedAgg = React.createElement(List, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 50\n              },\n              __self: this\n            }, this.buildAggregations(fieldName, values[key], userSelection));\n          }\n\n          return React.createElement(List.Item, {\n            key: index,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57\n            },\n            __self: this\n          }, checkboxItem, nestedAgg);\n        }\n      });\n    };\n\n    this.isItemChecked = (fieldName, aggrValue, userSelection) => {\n      const selectedFieldFound = _find(userSelection, userSelectedAggr => {\n        return fieldName in userSelectedAggr && // check if this field in user selection\n        userSelectedAggr[fieldName].value === aggrValue.key && // check if field value corresponds to this aggregation value\n        Object.keys(userSelectedAggr[fieldName]).length === 1 // check if it has not nested user selections\n        ;\n      });\n\n      return selectedFieldFound ? true : false;\n    };\n\n    this.field = props.field;\n    this.onUserSelectionChange = props.onUserSelectionChange;\n    this.renderElement = props.renderElement || this._renderElement;\n  }\n\n  render() {\n    const values = this.props.values;\n    const userSelection = this.props.userSelection;\n    const allAgggregations = this.buildAggregations(this.field, values, userSelection);\n    return React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, allAgggregations);\n  }\n\n}\nAggregatorValues.propTypes = {\n  field: PropTypes.string.isRequired,\n  values: PropTypes.object.isRequired,\n  userSelection: PropTypes.array.isRequired,\n  onUserSelectionChange: PropTypes.func.isRequired,\n  renderElement: PropTypes.func\n};\nAggregatorValues.defaultProps = {\n  renderElement: null\n};","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/components/Aggregator/AggregatorValues.js"],"names":["React","Component","PropTypes","Checkbox","List","_find","_capitalize","AggregatorValues","constructor","props","buildAggregations","fieldName","values","userSelection","parentNestedField","hasNestedField","Object","keys","map","key","index","aggrValue","checked","isItemChecked","_onUserSelectionChange","e","value","aggrNameValue","onUserSelectionChange","label","name","total","checkboxItem","nestedAgg","selectedFieldFound","userSelectedAggr","length","field","renderElement","_renderElement","render","allAgggregations","propTypes","string","isRequired","object","array","func","defaultProps"],"mappings":"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","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Checkbox, List } from 'semantic-ui-react';\nimport _find from 'lodash/find';\nimport _capitalize from 'lodash/capitalize';\n\nexport default class AggregatorValues extends Component {\n  constructor(props) {\n    super(props);\n    this.field = props.field;\n    this.onUserSelectionChange = props.onUserSelectionChange;\n    this.renderElement = props.renderElement || this._renderElement;\n  }\n\n  buildAggregations = (fieldName, values, userSelection) => {\n    const parentNestedField = values.hasNestedField;\n\n    return Object.keys(values).map((key, index) => {\n      if (typeof values[key] === 'object') {\n        const aggrValue = values[key];\n        const checked = this.isItemChecked(fieldName, aggrValue, userSelection);\n        const _onUserSelectionChange = (e, { value }) => {\n          const aggrNameValue = {};\n          aggrNameValue[fieldName] = { value: aggrValue.key };\n          this.onUserSelectionChange(aggrNameValue);\n        };\n\n        const label = `${_capitalize(aggrValue.name)} (${aggrValue.total})`;\n\n        const checkboxItem = (\n          <Checkbox\n            label={label}\n            value={aggrValue.key}\n            checked={checked}\n            onClick={_onUserSelectionChange}\n          />\n        );\n\n        let nestedAgg;\n        if (values[key].hasNestedField) {\n          nestedAgg = (\n            <List>\n              {this.buildAggregations(fieldName, values[key], userSelection)}\n            </List>\n          );\n        }\n\n        return (\n          <List.Item key={index}>\n            {checkboxItem}\n            {nestedAgg}\n          </List.Item>\n        );\n      }\n    });\n  };\n\n  isItemChecked = (fieldName, aggrValue, userSelection) => {\n    const selectedFieldFound = _find(userSelection, userSelectedAggr => {\n      return (\n        fieldName in userSelectedAggr && // check if this field in user selection\n        userSelectedAggr[fieldName].value === aggrValue.key && // check if field value corresponds to this aggregation value\n        Object.keys(userSelectedAggr[fieldName]).length === 1 // check if it has not nested user selections\n      );\n    });\n    return selectedFieldFound ? true : false;\n  };\n\n  render() {\n    const values = this.props.values;\n    const userSelection = this.props.userSelection;\n\n    const allAgggregations = this.buildAggregations(\n      this.field,\n      values,\n      userSelection\n    );\n\n    return <List>{allAgggregations}</List>;\n  }\n}\n\nAggregatorValues.propTypes = {\n  field: PropTypes.string.isRequired,\n  values: PropTypes.object.isRequired,\n  userSelection: PropTypes.array.isRequired,\n  onUserSelectionChange: PropTypes.func.isRequired,\n  renderElement: PropTypes.func,\n};\n\nAggregatorValues.defaultProps = {\n  renderElement: null,\n};\n"]},"metadata":{},"sourceType":"module"}