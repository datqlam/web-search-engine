{"ast":null,"code":"/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018-2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport _cloneDeep from 'lodash/cloneDeep';\nimport { SET_QUERY_COMPONENT_INITIAL_STATE, SET_QUERY_STRING, SET_QUERY_SORTING, SET_QUERY_SORT_BY, SET_QUERY_SORT_ORDER, SET_QUERY_PAGINATION_PAGE, SET_QUERY_PAGINATION_SIZE, SET_QUERY_AGGREGATION, SET_QUERY_SUGGESTIONS, SET_SUGGESTION_STRING, CLEAR_QUERY_SUGGESTIONS, RESET_QUERY, RESULTS_LOADING, RESULTS_FETCH_SUCCESS, RESULTS_FETCH_ERROR, RESULTS_UPDATE_LAYOUT } from '../types';\nexport const setInitialState = initialState => {\n  return dispatch => {\n    dispatch({\n      type: SET_QUERY_COMPONENT_INITIAL_STATE,\n      payload: initialState\n    });\n  };\n};\nexport const onAppInitialized = searchOnInit => {\n  return async dispatch => {\n    if (searchOnInit) {\n      await dispatch(executeQuery(false));\n    }\n  };\n};\nexport const updateQueryString = queryString => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_STRING,\n      payload: queryString\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateQuerySorting = (sortByValue, sortOrderValue) => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_SORTING,\n      payload: {\n        sortBy: sortByValue,\n        sortOrder: sortOrderValue\n      }\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateQuerySortBy = sortByValue => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_SORT_BY,\n      payload: sortByValue\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateQuerySortOrder = sortOrderValue => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_SORT_ORDER,\n      payload: sortOrderValue\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateQueryPaginationPage = page => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_PAGINATION_PAGE,\n      payload: page\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateQueryPaginationSize = size => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_PAGINATION_SIZE,\n      payload: size\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateQueryAggregation = aggregation => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_AGGREGATION,\n      payload: aggregation\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const updateResultsLayout = layout => {\n  return async (dispatch, getState, config) => {\n    const urlQueryStringHandler = config.urlQueryStringHandler;\n\n    if (urlQueryStringHandler) {\n      await dispatch({\n        type: RESULTS_UPDATE_LAYOUT,\n        payload: layout\n      });\n      const newStateQuery = getState().query;\n      urlQueryStringHandler.set(newStateQuery);\n    } else {\n      dispatch({\n        type: RESULTS_UPDATE_LAYOUT,\n        payload: layout\n      });\n    }\n  };\n};\nexport const resetQuery = () => {\n  return async dispatch => {\n    dispatch({\n      type: RESET_QUERY\n    });\n    await dispatch(executeQuery());\n  };\n};\nexport const executeQuery = (updateUrlQueryString = true) => {\n  return async (dispatch, getState, config) => {\n    const queryState = _cloneDeep(getState().query);\n\n    const searchApi = config.searchApi;\n    const urlQueryStringHandler = config.urlQueryStringHandler;\n\n    if (urlQueryStringHandler && updateUrlQueryString) {\n      urlQueryStringHandler.set(queryState);\n    }\n\n    dispatch({\n      type: RESULTS_LOADING\n    });\n\n    try {\n      const response = await searchApi.search(queryState);\n      console.log(response);\n      console.log(JSON.stringify(response));\n      dispatch({\n        type: RESULTS_FETCH_SUCCESS,\n        payload: {\n          aggregations: response.aggregations,\n          hits: response.hits,\n          total: response.total\n        }\n      });\n    } catch (reason) {\n      console.error(reason);\n      dispatch({\n        type: RESULTS_FETCH_ERROR,\n        payload: reason\n      });\n    }\n  };\n};\nexport const updateSuggestions = suggestionString => {\n  return async dispatch => {\n    dispatch({\n      type: SET_SUGGESTION_STRING,\n      payload: suggestionString\n    });\n    await dispatch(executeSuggestionQuery());\n  };\n};\nexport const executeSuggestionQuery = () => {\n  return async (dispatch, getState, config) => {\n    const queryState = _cloneDeep(getState().query);\n\n    const suggestionApi = config.suggestionApi;\n\n    try {\n      const response = await suggestionApi.search(queryState);\n      dispatch({\n        type: SET_QUERY_SUGGESTIONS,\n        payload: {\n          suggestions: response.suggestions\n        }\n      });\n    } catch (reason) {\n      console.error('Could not load suggestions due to: ' + reason);\n    }\n  };\n};\nexport const clearSuggestions = () => {\n  return dispatch => {\n    dispatch({\n      type: CLEAR_QUERY_SUGGESTIONS,\n      payload: {\n        suggestions: []\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/state/actions/query.js"],"names":["_cloneDeep","SET_QUERY_COMPONENT_INITIAL_STATE","SET_QUERY_STRING","SET_QUERY_SORTING","SET_QUERY_SORT_BY","SET_QUERY_SORT_ORDER","SET_QUERY_PAGINATION_PAGE","SET_QUERY_PAGINATION_SIZE","SET_QUERY_AGGREGATION","SET_QUERY_SUGGESTIONS","SET_SUGGESTION_STRING","CLEAR_QUERY_SUGGESTIONS","RESET_QUERY","RESULTS_LOADING","RESULTS_FETCH_SUCCESS","RESULTS_FETCH_ERROR","RESULTS_UPDATE_LAYOUT","setInitialState","initialState","dispatch","type","payload","onAppInitialized","searchOnInit","executeQuery","updateQueryString","queryString","updateQuerySorting","sortByValue","sortOrderValue","sortBy","sortOrder","updateQuerySortBy","updateQuerySortOrder","updateQueryPaginationPage","page","updateQueryPaginationSize","size","updateQueryAggregation","aggregation","updateResultsLayout","layout","getState","config","urlQueryStringHandler","newStateQuery","query","set","resetQuery","updateUrlQueryString","queryState","searchApi","response","search","console","log","JSON","stringify","aggregations","hits","total","reason","error","updateSuggestions","suggestionString","executeSuggestionQuery","suggestionApi","suggestions","clearSuggestions"],"mappings":"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","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018-2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport _cloneDeep from 'lodash/cloneDeep';\nimport {\n  SET_QUERY_COMPONENT_INITIAL_STATE,\n  SET_QUERY_STRING,\n  SET_QUERY_SORTING,\n  SET_QUERY_SORT_BY,\n  SET_QUERY_SORT_ORDER,\n  SET_QUERY_PAGINATION_PAGE,\n  SET_QUERY_PAGINATION_SIZE,\n  SET_QUERY_AGGREGATION,\n  SET_QUERY_SUGGESTIONS,\n  SET_SUGGESTION_STRING,\n  CLEAR_QUERY_SUGGESTIONS,\n  RESET_QUERY,\n  RESULTS_LOADING,\n  RESULTS_FETCH_SUCCESS,\n  RESULTS_FETCH_ERROR,\n  RESULTS_UPDATE_LAYOUT,\n} from '../types';\n\nexport const setInitialState = initialState => {\n  return dispatch => {\n    dispatch({\n      type: SET_QUERY_COMPONENT_INITIAL_STATE,\n      payload: initialState,\n    });\n  };\n};\n\nexport const onAppInitialized = searchOnInit => {\n  return async dispatch => {\n    if (searchOnInit) {\n      await dispatch(executeQuery(false));\n    }\n  };\n};\n\nexport const updateQueryString = queryString => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_STRING,\n      payload: queryString,\n    });\n\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateQuerySorting = (sortByValue, sortOrderValue) => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_SORTING,\n      payload: { sortBy: sortByValue, sortOrder: sortOrderValue },\n    });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateQuerySortBy = sortByValue => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_SORT_BY,\n      payload: sortByValue,\n    });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateQuerySortOrder = sortOrderValue => {\n  return async dispatch => {\n    dispatch({ type: SET_QUERY_SORT_ORDER, payload: sortOrderValue });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateQueryPaginationPage = page => {\n  return async dispatch => {\n    dispatch({ type: SET_QUERY_PAGINATION_PAGE, payload: page });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateQueryPaginationSize = size => {\n  return async dispatch => {\n    dispatch({ type: SET_QUERY_PAGINATION_SIZE, payload: size });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateQueryAggregation = aggregation => {\n  return async dispatch => {\n    dispatch({\n      type: SET_QUERY_AGGREGATION,\n      payload: aggregation,\n    });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const updateResultsLayout = layout => {\n  return async (dispatch, getState, config) => {\n    const urlQueryStringHandler = config.urlQueryStringHandler;\n    if (urlQueryStringHandler) {\n      await dispatch({\n        type: RESULTS_UPDATE_LAYOUT,\n        payload: layout,\n      });\n      const newStateQuery = getState().query;\n      urlQueryStringHandler.set(newStateQuery);\n    } else {\n      dispatch({\n        type: RESULTS_UPDATE_LAYOUT,\n        payload: layout,\n      });\n    }\n  };\n};\n\nexport const resetQuery = () => {\n  return async dispatch => {\n    dispatch({\n      type: RESET_QUERY,\n    });\n    await dispatch(executeQuery());\n  };\n};\n\nexport const executeQuery = (updateUrlQueryString = true) => {\n  return async (dispatch, getState, config) => {\n    const queryState = _cloneDeep(getState().query);\n    const searchApi = config.searchApi;\n    const urlQueryStringHandler = config.urlQueryStringHandler;\n\n    if (urlQueryStringHandler && updateUrlQueryString) {\n      urlQueryStringHandler.set(queryState);\n    }\n\n    dispatch({ type: RESULTS_LOADING });\n    try {\n      const response = await searchApi.search(queryState);\n      console.log(response);\n      console.log(JSON.stringify(response));\n      dispatch({\n        type: RESULTS_FETCH_SUCCESS,\n        payload: {\n          aggregations: response.aggregations,\n          hits: response.hits,\n          total: response.total,\n        },\n      });\n    } catch (reason) {\n      console.error(reason);\n      dispatch({ type: RESULTS_FETCH_ERROR, payload: reason });\n    }\n  };\n};\n\nexport const updateSuggestions = suggestionString => {\n  return async dispatch => {\n    dispatch({\n      type: SET_SUGGESTION_STRING,\n      payload: suggestionString,\n    });\n\n    await dispatch(executeSuggestionQuery());\n  };\n};\n\nexport const executeSuggestionQuery = () => {\n  return async (dispatch, getState, config) => {\n    const queryState = _cloneDeep(getState().query);\n    const suggestionApi = config.suggestionApi;\n\n    try {\n      const response = await suggestionApi.search(queryState);\n      dispatch({\n        type: SET_QUERY_SUGGESTIONS,\n        payload: {\n          suggestions: response.suggestions,\n        },\n      });\n    } catch (reason) {\n      console.error('Could not load suggestions due to: ' + reason);\n    }\n  };\n};\n\nexport const clearSuggestions = () => {\n  return dispatch => {\n    dispatch({\n      type: CLEAR_QUERY_SUGGESTIONS,\n      payload: {\n        suggestions: [],\n      },\n    });\n  };\n};\n"]},"metadata":{},"sourceType":"module"}