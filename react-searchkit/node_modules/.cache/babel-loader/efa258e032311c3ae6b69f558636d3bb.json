{"ast":null,"code":"/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018-2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport { connect } from 'react-redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './state/reducers';\nexport function configureStore(appConfig) {\n  const initialQueryState = {\n    queryString: '',\n    suggestions: [],\n    sortBy: null,\n    sortOrder: null,\n    page: -1,\n    size: -1,\n    aggregations: [],\n    layout: null\n  };\n  const initialResultsState = {\n    loading: false,\n    data: {\n      hits: [],\n      total: 0,\n      aggregations: {}\n    },\n    error: {}\n  }; // configure the initial state\n\n  const preloadedQueryState = appConfig.urlQueryStringHandler ? appConfig.urlQueryStringHandler.get(initialQueryState) : {};\n  const preloadedState = {\n    query: preloadedQueryState,\n    results: initialResultsState\n  };\n  return createStore(rootReducer, preloadedState, applyMiddleware(thunk.withExtraArgument(appConfig)));\n}\n\nfunction connectExtended(mapStateToProps, mapDispatchToProps, mergeProps) {\n  return connect(mapStateToProps, mapDispatchToProps, mergeProps);\n}\n\nexport { connectExtended as connect };","map":{"version":3,"sources":["/home/datio/workspace/react-searchkit/src/lib/store.js"],"names":["createStore","applyMiddleware","connect","thunk","rootReducer","configureStore","appConfig","initialQueryState","queryString","suggestions","sortBy","sortOrder","page","size","aggregations","layout","initialResultsState","loading","data","hits","total","error","preloadedQueryState","urlQueryStringHandler","get","preloadedState","query","results","withExtraArgument","connectExtended","mapStateToProps","mapDispatchToProps","mergeProps"],"mappings":"AAAA;;;;;;;AAQA,SAASA,WAAT,EAAsBC,eAAtB,QAA6C,OAA7C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,KAAP,MAAkB,aAAlB;AAEA,OAAOC,WAAP,MAAwB,kBAAxB;AAEA,OAAO,SAASC,cAAT,CAAwBC,SAAxB,EAAmC;AACxC,QAAMC,iBAAiB,GAAG;AACxBC,IAAAA,WAAW,EAAE,EADW;AAExBC,IAAAA,WAAW,EAAE,EAFW;AAGxBC,IAAAA,MAAM,EAAE,IAHgB;AAIxBC,IAAAA,SAAS,EAAE,IAJa;AAKxBC,IAAAA,IAAI,EAAE,CAAC,CALiB;AAMxBC,IAAAA,IAAI,EAAE,CAAC,CANiB;AAOxBC,IAAAA,YAAY,EAAE,EAPU;AAQxBC,IAAAA,MAAM,EAAE;AARgB,GAA1B;AAWA,QAAMC,mBAAmB,GAAG;AAC1BC,IAAAA,OAAO,EAAE,KADiB;AAE1BC,IAAAA,IAAI,EAAE;AACJC,MAAAA,IAAI,EAAE,EADF;AAEJC,MAAAA,KAAK,EAAE,CAFH;AAGJN,MAAAA,YAAY,EAAE;AAHV,KAFoB;AAO1BO,IAAAA,KAAK,EAAE;AAPmB,GAA5B,CAZwC,CAsBxC;;AACA,QAAMC,mBAAmB,GAAGhB,SAAS,CAACiB,qBAAV,GACxBjB,SAAS,CAACiB,qBAAV,CAAgCC,GAAhC,CAAoCjB,iBAApC,CADwB,GAExB,EAFJ;AAGA,QAAMkB,cAAc,GAAG;AACrBC,IAAAA,KAAK,EAAEJ,mBADc;AAErBK,IAAAA,OAAO,EAAEX;AAFY,GAAvB;AAIA,SAAOhB,WAAW,CAChBI,WADgB,EAEhBqB,cAFgB,EAGhBxB,eAAe,CAACE,KAAK,CAACyB,iBAAN,CAAwBtB,SAAxB,CAAD,CAHC,CAAlB;AAKD;;AAED,SAASuB,eAAT,CAAyBC,eAAzB,EAA0CC,kBAA1C,EAA8DC,UAA9D,EAA0E;AACxE,SAAO9B,OAAO,CACZ4B,eADY,EAEZC,kBAFY,EAGZC,UAHY,CAAd;AAKD;;AAED,SAASH,eAAe,IAAI3B,OAA5B","sourcesContent":["/*\n * This file is part of React-SearchKit.\n * Copyright (C) 2018-2019 CERN.\n *\n * React-SearchKit is free software; you can redistribute it and/or modify it\n * under the terms of the MIT License; see LICENSE file for more details.\n */\n\nimport { createStore, applyMiddleware } from 'redux';\nimport { connect } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport rootReducer from './state/reducers';\n\nexport function configureStore(appConfig) {\n  const initialQueryState = {\n    queryString: '',\n    suggestions: [],\n    sortBy: null,\n    sortOrder: null,\n    page: -1,\n    size: -1,\n    aggregations: [],\n    layout: null,\n  };\n\n  const initialResultsState = {\n    loading: false,\n    data: {\n      hits: [],\n      total: 0,\n      aggregations: {},\n    },\n    error: {},\n  };\n\n  // configure the initial state\n  const preloadedQueryState = appConfig.urlQueryStringHandler\n    ? appConfig.urlQueryStringHandler.get(initialQueryState)\n    : {};\n  const preloadedState = {\n    query: preloadedQueryState,\n    results: initialResultsState,\n  };\n  return createStore(\n    rootReducer,\n    preloadedState,\n    applyMiddleware(thunk.withExtraArgument(appConfig))\n  );\n}\n\nfunction connectExtended(mapStateToProps, mapDispatchToProps, mergeProps) {\n  return connect(\n    mapStateToProps,\n    mapDispatchToProps,\n    mergeProps\n  );\n}\n\nexport { connectExtended as connect };\n"]},"metadata":{},"sourceType":"module"}